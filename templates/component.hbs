{{#if env}}
{{{env}}}
{{/if}}
{{#if importReact}}import React from 'react';{{/if}}
{{#if imports.length}}
{{#each imports}}
{{{this}}};
{{/each}}{{/if}}
{{#unless javascript}}
{{#if props.length}}
{{{propsDefinition resourceName this}}}
{{#each props}}
  {{#unless (isPropSpread name)}}{{name}}: {{type}};{{/unless}}
{{/each}}
}

{{/if}}
{{/unless}}

{{declarations}}

{{#if forwardRef}}const {{resourceName}} = forwardRef{{{refParams this}}}({{/if}}
{{exportDefinition this}}({{{getPropArgs props}}}{{propType resourceName this}}){{displayReturnType this}}
  {{#each state}}
  const [{{name}}, {{setter}}] = useState{{#if type}}<{{type}}>{{/if}}({{{getDefaultState type initialValue}}});
  {{/each}}

  {{logic}}

  return (<{{#if extends}}{{extends}}{{else}}div{{/if}}{{#if css}} className={styles.{{cssRoot cssModuleRoot}} } {{/if}} {{#if forwardRef}} ref={ref} {{/if}} {{#if (hasPropSpread this)}} {...props} {{/if}}{{#if (isSelfClosing extends)}}/{{/if}}>
  {{#unless (isSelfClosing extends)}}
    {{#if hasChildren}}
      {children}
    {{/if}}
    
  {{content}}
    
  </{{#if extends}}{{extends}}{{else}}div{{/if}}>);
  {{else}})
  {{/unless}}
}
{{#if forwardRef}}){{/if}}
{{#unless inlineExport}}

export {{#unless exportNamed}}default {{/unless}}{{resourceName}};
{{/unless}}
